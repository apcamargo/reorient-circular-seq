#!/usr/bin/env python

import bz2
import functools
import gzip
import logging
import lzma
import multiprocessing
import multiprocessing.pool
import textwrap
from contextlib import contextmanager
from enum import Enum, auto
from pathlib import Path
from typing import Generator, Optional, Sequence

import pyrodigal_gv
import pyzstd
import rich_click as click
from pyrodigal import Gene
from rich.console import Console
from rich.logging import RichHandler

ORF_FINDER = pyrodigal_gv.ViralGeneFinder(meta=True, mask=True)

type Interval = list[tuple[int, int]]


class Compression(Enum):
    bzip2 = auto()
    gzip = auto()
    xz = auto()
    zstd = auto()
    uncompressed = auto()


def is_compressed(filepath: Path):
    with open(filepath, "rb") as fi:
        signature = fi.peek(8)[:8]
        if tuple(signature[:2]) == (0x1F, 0x8B):
            return Compression.gzip
        elif tuple(signature[:3]) == (0x42, 0x5A, 0x68):
            return Compression.bzip2
        elif tuple(signature[:7]) == (0xFD, 0x37, 0x7A, 0x58, 0x5A, 0x00, 0x00):
            return Compression.xz
        elif tuple(signature[:4]) == (0x28, 0xB5, 0x2F, 0xFD):
            return Compression.zstd
        else:
            return Compression.uncompressed


@contextmanager
def open_file(filepath):
    if filepath.name == "-":
        fi = click.open_file(filepath, "r")
    else:
        filepath_compression = is_compressed(filepath)
        if filepath_compression is Compression.gzip:
            fi = gzip.open(filepath, "rt")
        elif filepath_compression is Compression.bzip2:
            fi = bz2.open(filepath, "rt")
        elif filepath_compression is Compression.xz:
            fi = lzma.open(filepath, "rt")
        elif filepath_compression is Compression.zstd:
            fi = pyzstd.open(filepath, "rt")
        else:
            fi = open(filepath, "r")
    try:
        yield fi
    finally:
        fi.close()


class Record:
    def __init__(self, header: str, seq: str, reorientation: Optional[int] = None):
        self._header: str = header
        self._seq: bytes = seq.encode("ascii")
        self._genes: Sequence[Gene] = ORF_FINDER.find_genes(seq)
        self._trimmed: Optional[int] = None
        self._reorientation: Optional[int] = reorientation

    @property
    def header(self):
        return self._header

    @header.setter
    def header(self, header):
        self._header = header

    @property
    def accession(self):
        return self._header.split()[0]

    @property
    def seq(self):
        return self._seq.decode()

    @property
    def genes(self):
        return self._genes

    @genes.setter
    def genes(self, genes):
        self._genes = genes

    @property
    def reorientation(self):
        return self._reorientation

    @reorientation.setter
    def reorientation(self, reorientation):
        self._reorientation = reorientation

    @property
    def partial_genes(self):
        return (self.genes[0].partial_begin, self.genes[-1].partial_end)

    def remove_tr(self, min_length: int = 21):
        substring = self.seq.casefold()[:min_length]
        pos = self.seq.casefold().rfind(substring)
        if pos < len(self) / 2:
            return self
        substring = self.seq.casefold()[pos:]
        if self.seq.casefold()[: len(substring)] == substring:
            self._trimmed = len(substring)
            return self[:pos]
        else:
            return self

    def is_good_record(self) -> bool:
        if len(self.genes) == 0:
            return True
        if not any(self.partial_genes):
            return True
        else:
            return False

    def __str__(self):
        return (
            f">{self.header}\n{textwrap.fill(self.seq, 60, break_on_hyphens=False)}\n"
        )

    def __len__(self):
        return len(self.seq)

    def __getitem__(self, k: int):
        return Record(self.header, self.seq[k])

    def __eq__(self, other: object):
        if other.__class__ is self.__class__:
            return self.seq.casefold() == other.seq.casefold()
        elif other.__class__ is str:
            return self.seq.casefold() == other.casefold()
        return NotImplemented


def read_fasta(
    filepath: Optional[str] = None, uppercase: bool = False, strip_n: bool = False
) -> Generator[Record, None, None]:
    with open_file(filepath) as fi:
        last = None
        while True:
            if not last:
                for line in fi:
                    if line[0] == ">":
                        last = line[:-1]
                        break
            if not last:
                break
            name, seqs, last = last[1:], [], None
            for line in fi:
                if line[0] == ">":
                    last = line[:-1]
                    break
                seqs.append(line[:-1])
            seqs = "".join(seqs)
            if uppercase:
                seqs = seqs.upper()
            if strip_n:
                seqs = seqs.strip("nN")
            if len(seqs):
                yield Record(name, seqs)
            if not last:
                break


def merge_intervals(intervals: Interval) -> Interval:
    if not intervals:
        return []
    intervals.sort()
    merged_intervals = [intervals[0]]
    for current_start, current_end in intervals[1:]:
        last_start, last_end = merged_intervals[-1]
        if last_start <= current_start <= last_end:
            # Merge the intervals by updating the end of the last interval
            merged_intervals[-1] = (last_start, max(last_end, current_end))
        else:
            merged_intervals.append((current_start, current_end))
    return merged_intervals


def interval_difference(a: Interval, b: Interval) -> Interval:
    values_b = []
    for interval in b:
        values_b.extend(range(interval[0], interval[1] + 1))
    values_b = set(values_b)
    result = []
    for interval in a:
        values_a = set(range(interval[0], interval[1] + 1))
        diff = sorted(values_a.difference(values_b))
        intervals = []
        i = 0
        while i < len(diff):
            start = diff[i]
            while i < len(diff) - 1 and diff[i + 1] == diff[i] + 1:
                i += 1
            end = diff[i]
            intervals.append([start, end])
            i += 1
        result.extend(intervals)
    return result


def get_intergenic_intervals(genes: Sequence[Gene], sort: bool) -> Interval:
    gene_intervals = merge_intervals([(g.begin, g.end) for g in genes])
    intergenic_intervals = interval_difference(
        [(0, len(genes.sequence))], gene_intervals
    )
    if sort:
        intergenic_intervals = sorted(
            intergenic_intervals, key=lambda x: x[1] - x[0], reverse=True
        )
    return intergenic_intervals


def reorient_record(
    record: Record,
    remove_tr: bool = False,
    min_tr_length: int = 21,
) -> Record:
    if remove_tr:
        record = record.remove_tr(min_tr_length)
    if record.is_good_record():
        return record
    intergenic_intervals = get_intergenic_intervals(record.genes, sort=True)
    for interval_i in intergenic_intervals:
        midpoint = round((interval_i[0] + interval_i[1]) / 2)
        r_record = Record(
            record.header,
            record.seq[midpoint:] + record.seq[:midpoint],
            reorientation=midpoint,
        )
        if r_record.is_good_record():
            return r_record
    return record


@click.command()
@click.argument(
    "input",
    type=click.Path(path_type=Path, exists=True, allow_dash=True),
    required=False,
    default="-",
)
@click.argument(
    "output",
    type=click.Path(path_type=Path, allow_dash=True),
    required=False,
    default="-",
)
@click.option(
    "--remove-tr",
    is_flag=True,
    show_default=True,
    help="Trim terminal repeats from the ends of the sequences.",
)
@click.option(
    "--min-tr-length",
    type=click.IntRange(min=1),
    default=21,
    show_default=True,
    help="Minimum length of the terminal repeat to be removed. Only used if --remove-tr is set.",
)
@click.option(
    "--threads",
    "-t",
    type=click.IntRange(min=1, max=multiprocessing.cpu_count()),
    default=min(4, multiprocessing.cpu_count()),
    show_default=True,
    help="Number of threads to use.",
)
@click.option(
    "-v",
    "--verbose",
    type=click.IntRange(min=0, max=2),
    default=0,
    show_default=True,
    help="Verbosity level.",
)
@click.help_option("--help", "-h")
def main(input, output, remove_tr, min_tr_length, verbose, threads):
    logging.basicConfig(
        level=40 if verbose == 0 else 30 if verbose == 1 else 20,
        format="%(message)s",
        datefmt="[%X]",
        handlers=[
            RichHandler(
                omit_repeated_times=False,
                show_path=False,
                markup=True,
                console=Console(stderr=True),
            )
        ],
    )

    reorient_record_with_params = functools.partial(
        reorient_record, remove_tr=remove_tr, min_tr_length=min_tr_length
    )

    with multiprocessing.pool.ThreadPool(threads) as pool, click.open_file(
        output, "w"
    ) as fo:
        for record in pool.imap(reorient_record_with_params, read_fasta(input)):
            record_name = f"[bold aquamarine3]{record.accession}[/]"
            if record.is_good_record() and not record.reorientation:
                m = f"{'Contig unchanged:':<40}{record_name}."
                logging.info(m)
            elif record.is_good_record():
                m = f"{'Gene truncation fixed by reorientation:':<40}{record_name}."
                logging.info(m)
            else:
                m = f"{'Gene truncation could not be fixed:':<40}{record_name}."
                logging.warning(m)
            fo.write(str(record))


if __name__ == "__main__":
    main()
